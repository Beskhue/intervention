#!/usr/bin/env python3
"""Intervention learning entrypoints."""

import click
from pathlib import Path
from loguru import logger
import sys


@click.group()
def cli():
    pass


@cli.command()
def demo():
    import intervention.run

    intervention.run.demo()


@cli.command()
def manual():
    import intervention.run

    intervention.run.manual()


@cli.command()
def collect():
    import intervention.run

    intervention.run.collect()


@cli.command()
@click.option(
    "-n",
    "--num_episodes",
    required=True,
    type=int,
)
@click.option(
    "-d",
    "--directory",
    default=".",
    type=click.Path(
        exists=False, file_okay=False, dir_okay=True, writable=True, readable=True
    ),
)
def collect_teacher_examples(num_episodes: int, directory: str):
    """
    Collect examples of driving from a teacher agent.
    """
    import intervention.run

    data_path = Path(directory)
    data_path.mkdir(parents=True, exist_ok=True)

    intervention.run.collect_example_episodes(
        data_path=data_path, num_episodes=num_episodes
    )


@cli.command()
@click.option(
    "device_name",
    "--device",
    default="cuda:0",
    type=str,
    help=(
        "The device to run on. "
        "See torch's documentation on torch.device for more information."
    ),
)
@click.option(
    "-o",
    "--output-directory",
    default=".",
    type=click.Path(
        exists=False, file_okay=False, dir_okay=True, writable=True, readable=True
    ),
    help=("The directory to write the output checkpoints to."),
)
def train_test(device_name: str, output_directory: str):
    import torch
    import intervention.train.train

    output_path = Path(output_directory)
    output_path.mkdir(parents=True, exist_ok=True)

    device = torch.device(device_name)
    intervention.train.train.test(device, output_path)


if __name__ == "__main__":
    logger.remove(handler_id=0)  # Remove default handler.
    logger.add(
        sys.stderr,
        level="TRACE",
        format=(
            "<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green>"
            "| <red>{process.name: <10} {thread.name: <10}</red>"
            "| <level>{level: <8}</level>"
            "| <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan>"
            "- <level>{message}</level>"
        ),
    )

    cli()
